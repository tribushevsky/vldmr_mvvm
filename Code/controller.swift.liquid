//
//  {{ prefix }}{{ module_info.name }}Controller.swift
{% include 'header' %}

import UIKit
import RxSwift
import RxCocoa

class {{ prefix }}{{ module_info.name }}Controller: {{ prefix }}ViewController {
	var viewModel: {{ prefix }}{{ module_info.name }}ViewModel!

	init(viewModel: {{ prefix }}{{ module_info.name }}ViewModel) {
	    self.viewModel = viewModel
	    super.init(nibName: "{{ prefix }}{{ module_info.name }}Controller", bundle: nil)
	}

	private override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
	    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
	}

	override func viewDidLoad() {
	    super.viewDidLoad()
	    
	    localize()
	    setupBinding()
	}	

	//private func register{{ module_info.name }}(container: Container) {
	//    container.register({{ prefix }}{{ module_info.name }}Controller.self) { r in
	//        return {{ prefix }}{{ module_info.name }}Controller(viewModel: r.resolve({{ prefix }}{{ module_info.name }}ViewModel.self)!)
	//    }
	//    
	//    container.register({{ prefix }}{{ module_info.name }}ViewModel.self) { r in
	//        return {{ prefix }}{{ module_info.name }}ViewModel(context: r.resolve({{ prefix }}{{ module_info.name }}Context.self)!,
	//                                useCase: r.resolve({{ prefix }}{{ module_info.name }}UseCase.self)!,
	//                                navigator: r.resolve({{ prefix }}{{ module_info.name }}Navigator.self)!)
	//    }
	//    container.register({{ prefix }}{{ module_info.name }}Context.self) { _ in return {{ prefix }}Base{{ module_info.name }}Context() }
	//    container.register({{ prefix }}{{ module_info.name }}UseCase.self) { r in return {{ prefix }}Base{{ module_info.name }}UseCase() }
	//    container.register({{ prefix }}{{ module_info.name }}Navigator.self) { r in
	//        return {{ prefix }}Base{{ module_info.name }}Navigator(navigationController: UINavigationController(),
	//                                    dependencyResolver: r.resolve({{ prefix }}DependencyResolver.self)!)
	//    }
	//}
}

private extension {{ prefix }}{{ module_info.name }}Controller {
	func setupBinding() {
	    let input = {{ prefix }}{{ module_info.name }}ViewModel.Input()
	    let output = viewModel.transform(input: input)    
	}

	func localize() {
	    
	}
}